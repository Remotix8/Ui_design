{"ast":null,"code":"/**\r\n * @fileOverview\r\n * @author David Gossow - dgossow@willowgarage.com\r\n */\n\nvar Vector3 = require('./Vector3');\nvar Quaternion = require('./Quaternion');\n\n/**\r\n * A Pose in 3D space. Values are copied into this object.\r\n *\r\n * @constructor\r\n * @param {Object} options\r\n * @param {Vector3} options.position - The ROSLIB.Vector3 describing the position.\r\n * @param {Quaternion} options.orientation - The ROSLIB.Quaternion describing the orientation.\r\n */\nfunction Pose(options) {\n  options = options || {};\n  // copy the values into this object if they exist\n  this.position = new Vector3(options.position);\n  this.orientation = new Quaternion(options.orientation);\n}\n\n/**\r\n * Apply a transform against this pose.\r\n *\r\n * @param {Transform} tf - The transform to be applied.\r\n */\nPose.prototype.applyTransform = function (tf) {\n  this.position.multiplyQuaternion(tf.rotation);\n  this.position.add(tf.translation);\n  var tmp = tf.rotation.clone();\n  tmp.multiply(this.orientation);\n  this.orientation = tmp;\n};\n\n/**\r\n * Clone a copy of this pose.\r\n *\r\n * @returns {Pose} The cloned pose.\r\n */\nPose.prototype.clone = function () {\n  return new Pose(this);\n};\n\n/**\r\n * Multiply this pose with another pose without altering this pose.\r\n *\r\n * @returns {Pose} The result of the multiplication.\r\n */\nPose.prototype.multiply = function (pose) {\n  var p = pose.clone();\n  p.applyTransform({\n    rotation: this.orientation,\n    translation: this.position\n  });\n  return p;\n};\n\n/**\r\n * Compute the inverse of this pose.\r\n *\r\n * @returns {Pose} The inverse of the pose.\r\n */\nPose.prototype.getInverse = function () {\n  var inverse = this.clone();\n  inverse.orientation.invert();\n  inverse.position.multiplyQuaternion(inverse.orientation);\n  inverse.position.x *= -1;\n  inverse.position.y *= -1;\n  inverse.position.z *= -1;\n  return inverse;\n};\nmodule.exports = Pose;","map":{"version":3,"names":["Vector3","require","Quaternion","Pose","options","position","orientation","prototype","applyTransform","tf","multiplyQuaternion","rotation","add","translation","tmp","clone","multiply","pose","p","getInverse","inverse","invert","x","y","z","module","exports"],"sources":["C:/git/Ui_design/react_design/node_modules/roslib/src/math/Pose.js"],"sourcesContent":["/**\r\n * @fileOverview\r\n * @author David Gossow - dgossow@willowgarage.com\r\n */\r\n\r\nvar Vector3 = require('./Vector3');\r\nvar Quaternion = require('./Quaternion');\r\n\r\n/**\r\n * A Pose in 3D space. Values are copied into this object.\r\n *\r\n * @constructor\r\n * @param {Object} options\r\n * @param {Vector3} options.position - The ROSLIB.Vector3 describing the position.\r\n * @param {Quaternion} options.orientation - The ROSLIB.Quaternion describing the orientation.\r\n */\r\nfunction Pose(options) {\r\n  options = options || {};\r\n  // copy the values into this object if they exist\r\n  this.position = new Vector3(options.position);\r\n  this.orientation = new Quaternion(options.orientation);\r\n}\r\n\r\n/**\r\n * Apply a transform against this pose.\r\n *\r\n * @param {Transform} tf - The transform to be applied.\r\n */\r\nPose.prototype.applyTransform = function(tf) {\r\n  this.position.multiplyQuaternion(tf.rotation);\r\n  this.position.add(tf.translation);\r\n  var tmp = tf.rotation.clone();\r\n  tmp.multiply(this.orientation);\r\n  this.orientation = tmp;\r\n};\r\n\r\n/**\r\n * Clone a copy of this pose.\r\n *\r\n * @returns {Pose} The cloned pose.\r\n */\r\nPose.prototype.clone = function() {\r\n  return new Pose(this);\r\n};\r\n\r\n/**\r\n * Multiply this pose with another pose without altering this pose.\r\n *\r\n * @returns {Pose} The result of the multiplication.\r\n */\r\nPose.prototype.multiply = function(pose) {\r\n  var p = pose.clone();\r\n  p.applyTransform({ rotation: this.orientation, translation: this.position });\r\n  return p;\r\n};\r\n\r\n/**\r\n * Compute the inverse of this pose.\r\n *\r\n * @returns {Pose} The inverse of the pose.\r\n */\r\nPose.prototype.getInverse = function() {\r\n  var inverse = this.clone();\r\n  inverse.orientation.invert();\r\n  inverse.position.multiplyQuaternion(inverse.orientation);\r\n  inverse.position.x *= -1;\r\n  inverse.position.y *= -1;\r\n  inverse.position.z *= -1;\r\n  return inverse;\r\n};\r\n\r\nmodule.exports = Pose;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,IAAIA,CAACC,OAAO,EAAE;EACrBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB;EACA,IAAI,CAACC,QAAQ,GAAG,IAAIL,OAAO,CAACI,OAAO,CAACC,QAAQ,CAAC;EAC7C,IAAI,CAACC,WAAW,GAAG,IAAIJ,UAAU,CAACE,OAAO,CAACE,WAAW,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACAH,IAAI,CAACI,SAAS,CAACC,cAAc,GAAG,UAASC,EAAE,EAAE;EAC3C,IAAI,CAACJ,QAAQ,CAACK,kBAAkB,CAACD,EAAE,CAACE,QAAQ,CAAC;EAC7C,IAAI,CAACN,QAAQ,CAACO,GAAG,CAACH,EAAE,CAACI,WAAW,CAAC;EACjC,IAAIC,GAAG,GAAGL,EAAE,CAACE,QAAQ,CAACI,KAAK,CAAC,CAAC;EAC7BD,GAAG,CAACE,QAAQ,CAAC,IAAI,CAACV,WAAW,CAAC;EAC9B,IAAI,CAACA,WAAW,GAAGQ,GAAG;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAX,IAAI,CAACI,SAAS,CAACQ,KAAK,GAAG,YAAW;EAChC,OAAO,IAAIZ,IAAI,CAAC,IAAI,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAA,IAAI,CAACI,SAAS,CAACS,QAAQ,GAAG,UAASC,IAAI,EAAE;EACvC,IAAIC,CAAC,GAAGD,IAAI,CAACF,KAAK,CAAC,CAAC;EACpBG,CAAC,CAACV,cAAc,CAAC;IAAEG,QAAQ,EAAE,IAAI,CAACL,WAAW;IAAEO,WAAW,EAAE,IAAI,CAACR;EAAS,CAAC,CAAC;EAC5E,OAAOa,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAf,IAAI,CAACI,SAAS,CAACY,UAAU,GAAG,YAAW;EACrC,IAAIC,OAAO,GAAG,IAAI,CAACL,KAAK,CAAC,CAAC;EAC1BK,OAAO,CAACd,WAAW,CAACe,MAAM,CAAC,CAAC;EAC5BD,OAAO,CAACf,QAAQ,CAACK,kBAAkB,CAACU,OAAO,CAACd,WAAW,CAAC;EACxDc,OAAO,CAACf,QAAQ,CAACiB,CAAC,IAAI,CAAC,CAAC;EACxBF,OAAO,CAACf,QAAQ,CAACkB,CAAC,IAAI,CAAC,CAAC;EACxBH,OAAO,CAACf,QAAQ,CAACmB,CAAC,IAAI,CAAC,CAAC;EACxB,OAAOJ,OAAO;AAChB,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAGvB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}