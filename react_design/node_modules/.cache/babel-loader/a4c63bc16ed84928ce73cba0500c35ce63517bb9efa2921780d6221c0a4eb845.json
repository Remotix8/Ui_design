{"ast":null,"code":"/**\r\n * @fileOverview\r\n * @author Laura Lindzey - lindzey@gmail.com\r\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\r\n * An actionlib action server client.\r\n *\r\n * Emits the following events:\r\n *  * 'goal' - Goal sent by action client.\r\n *  * 'cancel' - Action client has canceled the request.\r\n *\r\n * @constructor\r\n * @param {Object} options\r\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\r\n * @param {string} options.serverName - The action server name, like '/fibonacci'.\r\n * @param {string} options.actionName - The action message name, like 'actionlib_tutorials/FibonacciAction'.\r\n */\nfunction SimpleActionServer(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n\n  // create and advertise publishers\n  this.feedbackPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  this.feedbackPublisher.advertise();\n  var statusPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  statusPublisher.advertise();\n  this.resultPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  this.resultPublisher.advertise();\n\n  // create and subscribe to listeners\n  var goalListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  var cancelListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/cancel',\n    messageType: 'actionlib_msgs/GoalID'\n  });\n\n  // Track the goals and their status in order to publish status...\n  this.statusMessage = new Message({\n    header: {\n      stamp: {\n        secs: 0,\n        nsecs: 100\n      },\n      frame_id: ''\n    },\n    status_list: []\n  });\n\n  // needed for handling preemption prompted by a new goal being received\n  this.currentGoal = null; // currently tracked goal\n  this.nextGoal = null; // the one that'll be preempting\n\n  goalListener.subscribe(function (goalMessage) {\n    if (that.currentGoal) {\n      that.nextGoal = goalMessage;\n      // needs to happen AFTER rest is set up\n      that.emit('cancel');\n    } else {\n      that.statusMessage.status_list = [{\n        goal_id: goalMessage.goal_id,\n        status: 1\n      }];\n      that.currentGoal = goalMessage;\n      that.emit('goal', goalMessage.goal);\n    }\n  });\n\n  // helper function to determine ordering of timestamps\n  // returns t1 < t2\n  var isEarlier = function (t1, t2) {\n    if (t1.secs > t2.secs) {\n      return false;\n    } else if (t1.secs < t2.secs) {\n      return true;\n    } else if (t1.nsecs < t2.nsecs) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // TODO: this may be more complicated than necessary, since I'm\n  // not sure if the callbacks can ever wind up with a scenario\n  // where we've been preempted by a next goal, it hasn't finished\n  // processing, and then we get a cancel message\n  cancelListener.subscribe(function (cancelMessage) {\n    // cancel ALL goals if both empty\n    if (cancelMessage.stamp.secs === 0 && cancelMessage.stamp.secs === 0 && cancelMessage.id === '') {\n      that.nextGoal = null;\n      if (that.currentGoal) {\n        that.emit('cancel');\n      }\n    } else {\n      // treat id and stamp independently\n      if (that.currentGoal && cancelMessage.id === that.currentGoal.goal_id.id) {\n        that.emit('cancel');\n      } else if (that.nextGoal && cancelMessage.id === that.nextGoal.goal_id.id) {\n        that.nextGoal = null;\n      }\n      if (that.nextGoal && isEarlier(that.nextGoal.goal_id.stamp, cancelMessage.stamp)) {\n        that.nextGoal = null;\n      }\n      if (that.currentGoal && isEarlier(that.currentGoal.goal_id.stamp, cancelMessage.stamp)) {\n        that.emit('cancel');\n      }\n    }\n  });\n\n  // publish status at pseudo-fixed rate; required for clients to know they've connected\n  var statusInterval = setInterval(function () {\n    var currentTime = new Date();\n    var secs = Math.floor(currentTime.getTime() / 1000);\n    var nsecs = Math.round(1000000000 * (currentTime.getTime() / 1000 - secs));\n    that.statusMessage.header.stamp.secs = secs;\n    that.statusMessage.header.stamp.nsecs = nsecs;\n    statusPublisher.publish(that.statusMessage);\n  }, 500); // publish every 500ms\n}\nSimpleActionServer.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\r\n * Set action state to succeeded and return to client.\r\n *\r\n * @param {Object} result - The result to return to the client.\r\n */\nSimpleActionServer.prototype.setSucceeded = function (result) {\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 3\n    },\n    result: result\n  });\n  this.resultPublisher.publish(resultMessage);\n  this.statusMessage.status_list = [];\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\n\n/**\r\n * Set action state to aborted and return to client.\r\n *\r\n * @param {Object} result - The result to return to the client.\r\n */\nSimpleActionServer.prototype.setAborted = function (result) {\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 4\n    },\n    result: result\n  });\n  this.resultPublisher.publish(resultMessage);\n  this.statusMessage.status_list = [];\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\n\n/**\r\n * Send a feedback message.\r\n *\r\n * @param {Object} feedback - The feedback to send to the client.\r\n */\nSimpleActionServer.prototype.sendFeedback = function (feedback) {\n  var feedbackMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 1\n    },\n    feedback: feedback\n  });\n  this.feedbackPublisher.publish(feedbackMessage);\n};\n\n/**\r\n * Handle case where client requests preemption.\r\n */\nSimpleActionServer.prototype.setPreempted = function () {\n  this.statusMessage.status_list = [];\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 2\n    }\n  });\n  this.resultPublisher.publish(resultMessage);\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\nmodule.exports = SimpleActionServer;","map":{"version":3,"names":["Topic","require","Message","EventEmitter2","SimpleActionServer","options","that","ros","serverName","actionName","feedbackPublisher","name","messageType","advertise","statusPublisher","resultPublisher","goalListener","cancelListener","statusMessage","header","stamp","secs","nsecs","frame_id","status_list","currentGoal","nextGoal","subscribe","goalMessage","emit","goal_id","status","goal","isEarlier","t1","t2","cancelMessage","id","statusInterval","setInterval","currentTime","Date","Math","floor","getTime","round","publish","prototype","__proto__","setSucceeded","result","resultMessage","setAborted","sendFeedback","feedback","feedbackMessage","setPreempted","module","exports"],"sources":["C:/git/Ui_design/react_design/node_modules/roslib/src/actionlib/SimpleActionServer.js"],"sourcesContent":["/**\r\n * @fileOverview\r\n * @author Laura Lindzey - lindzey@gmail.com\r\n */\r\n\r\nvar Topic = require('../core/Topic');\r\nvar Message = require('../core/Message');\r\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\r\n\r\n/**\r\n * An actionlib action server client.\r\n *\r\n * Emits the following events:\r\n *  * 'goal' - Goal sent by action client.\r\n *  * 'cancel' - Action client has canceled the request.\r\n *\r\n * @constructor\r\n * @param {Object} options\r\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\r\n * @param {string} options.serverName - The action server name, like '/fibonacci'.\r\n * @param {string} options.actionName - The action message name, like 'actionlib_tutorials/FibonacciAction'.\r\n */\r\nfunction SimpleActionServer(options) {\r\n    var that = this;\r\n    options = options || {};\r\n    this.ros = options.ros;\r\n    this.serverName = options.serverName;\r\n    this.actionName = options.actionName;\r\n\r\n    // create and advertise publishers\r\n    this.feedbackPublisher = new Topic({\r\n        ros : this.ros,\r\n        name : this.serverName + '/feedback',\r\n        messageType : this.actionName + 'Feedback'\r\n    });\r\n    this.feedbackPublisher.advertise();\r\n\r\n    var statusPublisher = new Topic({\r\n        ros : this.ros,\r\n        name : this.serverName + '/status',\r\n        messageType : 'actionlib_msgs/GoalStatusArray'\r\n    });\r\n    statusPublisher.advertise();\r\n\r\n    this.resultPublisher = new Topic({\r\n        ros : this.ros,\r\n        name : this.serverName + '/result',\r\n        messageType : this.actionName + 'Result'\r\n    });\r\n    this.resultPublisher.advertise();\r\n\r\n    // create and subscribe to listeners\r\n    var goalListener = new Topic({\r\n        ros : this.ros,\r\n        name : this.serverName + '/goal',\r\n        messageType : this.actionName + 'Goal'\r\n    });\r\n\r\n    var cancelListener = new Topic({\r\n        ros : this.ros,\r\n        name : this.serverName + '/cancel',\r\n        messageType : 'actionlib_msgs/GoalID'\r\n    });\r\n\r\n    // Track the goals and their status in order to publish status...\r\n    this.statusMessage = new Message({\r\n        header : {\r\n            stamp : {secs : 0, nsecs : 100},\r\n            frame_id : ''\r\n        },\r\n        status_list : []\r\n    });\r\n\r\n    // needed for handling preemption prompted by a new goal being received\r\n    this.currentGoal = null; // currently tracked goal\r\n    this.nextGoal = null; // the one that'll be preempting\r\n\r\n    goalListener.subscribe(function(goalMessage) {\r\n\r\n    if(that.currentGoal) {\r\n            that.nextGoal = goalMessage;\r\n            // needs to happen AFTER rest is set up\r\n            that.emit('cancel');\r\n    } else {\r\n            that.statusMessage.status_list = [{goal_id : goalMessage.goal_id, status : 1}];\r\n            that.currentGoal = goalMessage;\r\n            that.emit('goal', goalMessage.goal);\r\n    }\r\n    });\r\n\r\n    // helper function to determine ordering of timestamps\r\n    // returns t1 < t2\r\n    var isEarlier = function(t1, t2) {\r\n        if(t1.secs > t2.secs) {\r\n            return false;\r\n        } else if(t1.secs < t2.secs) {\r\n            return true;\r\n        } else if(t1.nsecs < t2.nsecs) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    // TODO: this may be more complicated than necessary, since I'm\r\n    // not sure if the callbacks can ever wind up with a scenario\r\n    // where we've been preempted by a next goal, it hasn't finished\r\n    // processing, and then we get a cancel message\r\n    cancelListener.subscribe(function(cancelMessage) {\r\n\r\n        // cancel ALL goals if both empty\r\n        if(cancelMessage.stamp.secs === 0 && cancelMessage.stamp.secs === 0 && cancelMessage.id === '') {\r\n            that.nextGoal = null;\r\n            if(that.currentGoal) {\r\n                that.emit('cancel');\r\n            }\r\n        } else { // treat id and stamp independently\r\n            if(that.currentGoal && cancelMessage.id === that.currentGoal.goal_id.id) {\r\n                that.emit('cancel');\r\n            } else if(that.nextGoal && cancelMessage.id === that.nextGoal.goal_id.id) {\r\n                that.nextGoal = null;\r\n            }\r\n\r\n            if(that.nextGoal && isEarlier(that.nextGoal.goal_id.stamp,\r\n                                          cancelMessage.stamp)) {\r\n                that.nextGoal = null;\r\n            }\r\n            if(that.currentGoal && isEarlier(that.currentGoal.goal_id.stamp,\r\n                                             cancelMessage.stamp)) {\r\n                that.emit('cancel');\r\n            }\r\n        }\r\n    });\r\n\r\n    // publish status at pseudo-fixed rate; required for clients to know they've connected\r\n    var statusInterval = setInterval( function() {\r\n        var currentTime = new Date();\r\n        var secs = Math.floor(currentTime.getTime()/1000);\r\n        var nsecs = Math.round(1000000000*(currentTime.getTime()/1000-secs));\r\n        that.statusMessage.header.stamp.secs = secs;\r\n        that.statusMessage.header.stamp.nsecs = nsecs;\r\n        statusPublisher.publish(that.statusMessage);\r\n    }, 500); // publish every 500ms\r\n\r\n}\r\n\r\nSimpleActionServer.prototype.__proto__ = EventEmitter2.prototype;\r\n\r\n/**\r\n * Set action state to succeeded and return to client.\r\n *\r\n * @param {Object} result - The result to return to the client.\r\n */\r\nSimpleActionServer.prototype.setSucceeded = function(result) {\r\n    var resultMessage = new Message({\r\n        status : {goal_id : this.currentGoal.goal_id, status : 3},\r\n        result : result\r\n    });\r\n    this.resultPublisher.publish(resultMessage);\r\n\r\n    this.statusMessage.status_list = [];\r\n    if(this.nextGoal) {\r\n        this.currentGoal = this.nextGoal;\r\n        this.nextGoal = null;\r\n        this.emit('goal', this.currentGoal.goal);\r\n    } else {\r\n        this.currentGoal = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Set action state to aborted and return to client.\r\n *\r\n * @param {Object} result - The result to return to the client.\r\n */\r\nSimpleActionServer.prototype.setAborted = function(result) {\r\n    var resultMessage = new Message({\r\n        status : {goal_id : this.currentGoal.goal_id, status : 4},\r\n        result : result\r\n    });\r\n    this.resultPublisher.publish(resultMessage);\r\n\r\n    this.statusMessage.status_list = [];\r\n    if(this.nextGoal) {\r\n        this.currentGoal = this.nextGoal;\r\n        this.nextGoal = null;\r\n        this.emit('goal', this.currentGoal.goal);\r\n    } else {\r\n        this.currentGoal = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Send a feedback message.\r\n *\r\n * @param {Object} feedback - The feedback to send to the client.\r\n */\r\nSimpleActionServer.prototype.sendFeedback = function(feedback) {\r\n    var feedbackMessage = new Message({\r\n        status : {goal_id : this.currentGoal.goal_id, status : 1},\r\n        feedback : feedback\r\n    });\r\n    this.feedbackPublisher.publish(feedbackMessage);\r\n};\r\n\r\n/**\r\n * Handle case where client requests preemption.\r\n */\r\nSimpleActionServer.prototype.setPreempted = function() {\r\n    this.statusMessage.status_list = [];\r\n    var resultMessage = new Message({\r\n        status : {goal_id : this.currentGoal.goal_id, status : 2},\r\n    });\r\n    this.resultPublisher.publish(resultMessage);\r\n\r\n    if(this.nextGoal) {\r\n        this.currentGoal = this.nextGoal;\r\n        this.nextGoal = null;\r\n        this.emit('goal', this.currentGoal.goal);\r\n    } else {\r\n        this.currentGoal = null;\r\n    }\r\n};\r\n\r\nmodule.exports = SimpleActionServer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}