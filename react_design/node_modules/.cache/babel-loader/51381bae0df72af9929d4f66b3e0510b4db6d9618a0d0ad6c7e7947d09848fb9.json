{"ast":null,"code":"var _jsxFileName = \"/Users/junha/workspace/3\\uD559\\uB144 \\uACFC\\uBAA9/\\uC18C\\uD504\\uD2B8\\uC6E8\\uC5B4 \\uACF5\\uD559/Ui_design/react_design/src/contexts/WebSocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\n// 고객 정보 인터페이스\n// interface Customer {\n//   id: string;\n//   name: string;\n//   region: string;\n//   model: string;\n//   timestamp: string;\n// }\n\n// interface WebSocketContextType {\n//   ws: WebSocket | null;\n//   isConnected: boolean;\n//   sendMessage: (message: string) => void;\n//   customers: Customer[];\n//   connectedCustomer: Customer | null;\n//   connectToCustomer: (customer: Customer) => void;\n//   disconnectCustomer: () => void;\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(undefined);\n\n// interface WebSocketProviderProps {\n//   children: React.ReactNode;\n// }\n\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s();\n  const [ws, setWs] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [customers, setCustomers] = useState([]);\n  const [connectedCustomer, setConnectedCustomer] = useState(null);\n  useEffect(() => {\n    const websocket = new WebSocket('ws://localhost:9090');\n    websocket.onopen = () => {\n      console.log('WebSocket Connected');\n      setIsConnected(true);\n\n      // JSON 데이터 토픽 구독\n      const subscribeJsonData = {\n        op: 'subscribe',\n        topic: '/json_data',\n        type: 'std_msgs/String'\n      };\n      websocket.send(JSON.stringify(subscribeJsonData));\n    };\n    websocket.onclose = () => {\n      console.log('WebSocket Disconnected');\n      setIsConnected(false);\n      setConnectedCustomer(null);\n    };\n    websocket.onerror = error => {\n      console.error('WebSocket Error:', error);\n      setIsConnected(false);\n      setConnectedCustomer(null);\n    };\n    websocket.onmessage = event => {\n      const data = JSON.parse(event.data);\n\n      // JSON 데이터 토픽에서 고객 정보 파싱\n      if (data.topic === '/json_data') {\n        try {\n          const customerData = JSON.parse(data.msg.data);\n          const newCustomer = {\n            id: `${customerData.name}-${Date.now()}`,\n            // 유니크 ID 생성\n            name: customerData.name,\n            region: customerData.region,\n            model: customerData.model,\n            timestamp: customerData.timestamp\n          };\n\n          // 이미 같은 이름의 고객이 있는지 확인\n          setCustomers(prevCustomers => {\n            if (!prevCustomers.some(cust => cust.name === newCustomer.name)) {\n              return [...prevCustomers, newCustomer];\n            }\n            return prevCustomers;\n          });\n        } catch (error) {\n          console.error('Error parsing JSON data:', error);\n        }\n      }\n    };\n    setWs(websocket);\n    return () => {\n      websocket.close();\n    };\n  }, []);\n\n  // 특정 고객과 연결\n  const connectToCustomer = customer => {\n    setConnectedCustomer(customer);\n    if (ws && isConnected) {\n      // 카메라 토픽 구독\n      const subscribeCameraMsg = {\n        op: 'subscribe',\n        topic: '/camera/image_raw/compressed',\n        type: 'sensor_msgs/CompressedImage'\n      };\n      ws.send(JSON.stringify(subscribeCameraMsg));\n\n      // 속도 토픽 구독\n      const subscribeSpeedMsg = {\n        op: 'subscribe',\n        topic: '/cmd_vel',\n        type: 'geometry_msgs/Twist'\n      };\n      ws.send(JSON.stringify(subscribeSpeedMsg));\n\n      // 배터리 토픽 구독\n      const subscribeBatteryMsg = {\n        op: 'subscribe',\n        topic: '/battery_state',\n        type: 'sensor_msgs/BatteryState'\n      };\n      ws.send(JSON.stringify(subscribeBatteryMsg));\n    }\n  };\n\n  // 고객 연결 해제\n  const disconnectCustomer = () => {\n    if (ws && isConnected && connectedCustomer) {\n      // 카메라 토픽 구독 해제\n      const unsubscribeCameraMsg = {\n        op: 'unsubscribe',\n        topic: '/camera/image_raw/compressed'\n      };\n      ws.send(JSON.stringify(unsubscribeCameraMsg));\n\n      // 속도 토픽 구독 해제\n      const unsubscribeSpeedMsg = {\n        op: 'unsubscribe',\n        topic: '/cmd_vel'\n      };\n      ws.send(JSON.stringify(unsubscribeSpeedMsg));\n\n      // 배터리 토픽 구독 해제\n      const unsubscribeBatteryMsg = {\n        op: 'unsubscribe',\n        topic: '/battery_state'\n      };\n      ws.send(JSON.stringify(unsubscribeBatteryMsg));\n    }\n    setConnectedCustomer(null);\n  };\n  const sendMessage = message => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: {\n      ws,\n      isConnected,\n      sendMessage,\n      customers,\n      connectedCustomer,\n      connectToCustomer,\n      disconnectCustomer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketProvider, \"xrSTbfc9PHzPyfVl6ZQUBihdDHk=\");\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n};\n_s2(useWebSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","WebSocketContext","undefined","WebSocketProvider","children","_s","ws","setWs","isConnected","setIsConnected","customers","setCustomers","connectedCustomer","setConnectedCustomer","websocket","WebSocket","onopen","console","log","subscribeJsonData","op","topic","type","send","JSON","stringify","onclose","onerror","error","onmessage","event","data","parse","customerData","msg","newCustomer","id","name","Date","now","region","model","timestamp","prevCustomers","some","cust","close","connectToCustomer","customer","subscribeCameraMsg","subscribeSpeedMsg","subscribeBatteryMsg","disconnectCustomer","unsubscribeCameraMsg","unsubscribeSpeedMsg","unsubscribeBatteryMsg","sendMessage","message","readyState","OPEN","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","context","Error","$RefreshReg$"],"sources":["/Users/junha/workspace/3학년 과목/소프트웨어 공학/Ui_design/react_design/src/contexts/WebSocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\n// 고객 정보 인터페이스\n// interface Customer {\n//   id: string;\n//   name: string;\n//   region: string;\n//   model: string;\n//   timestamp: string;\n// }\n\n// interface WebSocketContextType {\n//   ws: WebSocket | null;\n//   isConnected: boolean;\n//   sendMessage: (message: string) => void;\n//   customers: Customer[];\n//   connectedCustomer: Customer | null;\n//   connectToCustomer: (customer: Customer) => void;\n//   disconnectCustomer: () => void;\n// }\n\nconst WebSocketContext = createContext(undefined);\n\n// interface WebSocketProviderProps {\n//   children: React.ReactNode;\n// }\n\nexport const WebSocketProvider = ({ children }) => {\n  const [ws, setWs] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [customers, setCustomers] = useState([]);\n  const [connectedCustomer, setConnectedCustomer] = useState(null);\n\n  useEffect(() => {\n    const websocket = new WebSocket('ws://localhost:9090');\n\n    websocket.onopen = () => {\n      console.log('WebSocket Connected');\n      setIsConnected(true);\n      \n      // JSON 데이터 토픽 구독\n      const subscribeJsonData = {\n        op: 'subscribe',\n        topic: '/json_data',\n        type: 'std_msgs/String'\n      };\n      websocket.send(JSON.stringify(subscribeJsonData));\n    };\n\n    websocket.onclose = () => {\n      console.log('WebSocket Disconnected');\n      setIsConnected(false);\n      setConnectedCustomer(null);\n    };\n\n    websocket.onerror = (error) => {\n      console.error('WebSocket Error:', error);\n      setIsConnected(false);\n      setConnectedCustomer(null);\n    };\n\n    websocket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      // JSON 데이터 토픽에서 고객 정보 파싱\n      if (data.topic === '/json_data') {\n        try {\n          const customerData = JSON.parse(data.msg.data);\n          const newCustomer = {\n            id: `${customerData.name}-${Date.now()}`, // 유니크 ID 생성\n            name: customerData.name,\n            region: customerData.region,\n            model: customerData.model,\n            timestamp: customerData.timestamp\n          };\n          \n          // 이미 같은 이름의 고객이 있는지 확인\n          setCustomers(prevCustomers => {\n            if (!prevCustomers.some(cust => cust.name === newCustomer.name)) {\n              return [...prevCustomers, newCustomer];\n            }\n            return prevCustomers;\n          });\n        } catch (error) {\n          console.error('Error parsing JSON data:', error);\n        }\n      }\n    };\n\n    setWs(websocket);\n\n    return () => {\n      websocket.close();\n    };\n  }, []);\n\n  // 특정 고객과 연결\n  const connectToCustomer = (customer) => {\n    setConnectedCustomer(customer);\n    \n    if (ws && isConnected) {\n      // 카메라 토픽 구독\n      const subscribeCameraMsg = {\n        op: 'subscribe',\n        topic: '/camera/image_raw/compressed',\n        type: 'sensor_msgs/CompressedImage'\n      };\n      ws.send(JSON.stringify(subscribeCameraMsg));\n      \n      // 속도 토픽 구독\n      const subscribeSpeedMsg = {\n        op: 'subscribe',\n        topic: '/cmd_vel',\n        type: 'geometry_msgs/Twist'\n      };\n      ws.send(JSON.stringify(subscribeSpeedMsg));\n      \n      // 배터리 토픽 구독\n      const subscribeBatteryMsg = {\n        op: 'subscribe',\n        topic: '/battery_state',\n        type: 'sensor_msgs/BatteryState'\n      };\n      ws.send(JSON.stringify(subscribeBatteryMsg));\n    }\n  };\n  \n  // 고객 연결 해제\n  const disconnectCustomer = () => {\n    if (ws && isConnected && connectedCustomer) {\n      // 카메라 토픽 구독 해제\n      const unsubscribeCameraMsg = {\n        op: 'unsubscribe',\n        topic: '/camera/image_raw/compressed'\n      };\n      ws.send(JSON.stringify(unsubscribeCameraMsg));\n      \n      // 속도 토픽 구독 해제\n      const unsubscribeSpeedMsg = {\n        op: 'unsubscribe',\n        topic: '/cmd_vel'\n      };\n      ws.send(JSON.stringify(unsubscribeSpeedMsg));\n      \n      // 배터리 토픽 구독 해제\n      const unsubscribeBatteryMsg = {\n        op: 'unsubscribe',\n        topic: '/battery_state'\n      };\n      ws.send(JSON.stringify(unsubscribeBatteryMsg));\n    }\n    \n    setConnectedCustomer(null);\n  };\n\n  const sendMessage = (message) => {\n    if (ws && ws.readyState === WebSocket.OPEN) {\n      ws.send(message);\n    }\n  };\n\n  return (\n    <WebSocketContext.Provider \n      value={{ \n        ws, \n        isConnected, \n        sendMessage,\n        customers,\n        connectedCustomer,\n        connectToCustomer,\n        disconnectCustomer\n      }}\n    >\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}