{"ast":null,"code":"/**\r\n * @fileOverview\r\n * @author Justin Young - justin@oodar.com.au\r\n * @author Russell Toris - rctoris@wpi.edu\r\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\r\n * An actionlib action listener.\r\n *\r\n * Emits the following events:\r\n *  * 'status' - The status messages received from the action server.\r\n *  * 'feedback' - The feedback messages received from the action server.\r\n *  * 'result' - The result returned from the action server.\r\n *\r\n * @constructor\r\n * @param {Object} options\r\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\r\n * @param {string} options.serverName - The action server name, like '/fibonacci'.\r\n * @param {string} options.actionName - The action message name, like 'actionlib_tutorials/FibonacciAction'.\r\n */\nfunction ActionListener(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n\n  // create the topics associated with actionlib\n  var goalListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  var feedbackListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  var statusListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  var resultListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  goalListener.subscribe(function (goalMessage) {\n    that.emit('goal', goalMessage);\n  });\n  statusListener.subscribe(function (statusMessage) {\n    statusMessage.status_list.forEach(function (status) {\n      that.emit('status', status);\n    });\n  });\n  feedbackListener.subscribe(function (feedbackMessage) {\n    that.emit('status', feedbackMessage.status);\n    that.emit('feedback', feedbackMessage.feedback);\n  });\n\n  // subscribe to the result topic\n  resultListener.subscribe(function (resultMessage) {\n    that.emit('status', resultMessage.status);\n    that.emit('result', resultMessage.result);\n  });\n}\nActionListener.prototype.__proto__ = EventEmitter2.prototype;\nmodule.exports = ActionListener;","map":{"version":3,"names":["Topic","require","Message","EventEmitter2","ActionListener","options","that","ros","serverName","actionName","goalListener","name","messageType","feedbackListener","statusListener","resultListener","subscribe","goalMessage","emit","statusMessage","status_list","forEach","status","feedbackMessage","feedback","resultMessage","result","prototype","__proto__","module","exports"],"sources":["C:/git/Ui_design/react_design/node_modules/roslib/src/actionlib/ActionListener.js"],"sourcesContent":["/**\r\n * @fileOverview\r\n * @author Justin Young - justin@oodar.com.au\r\n * @author Russell Toris - rctoris@wpi.edu\r\n */\r\n\r\nvar Topic = require('../core/Topic');\r\nvar Message = require('../core/Message');\r\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\r\n\r\n/**\r\n * An actionlib action listener.\r\n *\r\n * Emits the following events:\r\n *  * 'status' - The status messages received from the action server.\r\n *  * 'feedback' - The feedback messages received from the action server.\r\n *  * 'result' - The result returned from the action server.\r\n *\r\n * @constructor\r\n * @param {Object} options\r\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\r\n * @param {string} options.serverName - The action server name, like '/fibonacci'.\r\n * @param {string} options.actionName - The action message name, like 'actionlib_tutorials/FibonacciAction'.\r\n */\r\nfunction ActionListener(options) {\r\n  var that = this;\r\n  options = options || {};\r\n  this.ros = options.ros;\r\n  this.serverName = options.serverName;\r\n  this.actionName = options.actionName;\r\n\r\n\r\n  // create the topics associated with actionlib\r\n  var goalListener = new Topic({\r\n    ros : this.ros,\r\n    name : this.serverName + '/goal',\r\n    messageType : this.actionName + 'Goal'\r\n  });\r\n\r\n  var feedbackListener = new Topic({\r\n    ros : this.ros,\r\n    name : this.serverName + '/feedback',\r\n    messageType : this.actionName + 'Feedback'\r\n  });\r\n\r\n  var statusListener = new Topic({\r\n    ros : this.ros,\r\n    name : this.serverName + '/status',\r\n    messageType : 'actionlib_msgs/GoalStatusArray'\r\n  });\r\n\r\n  var resultListener = new Topic({\r\n    ros : this.ros,\r\n    name : this.serverName + '/result',\r\n    messageType : this.actionName + 'Result'\r\n  });\r\n\r\n  goalListener.subscribe(function(goalMessage) {\r\n      that.emit('goal', goalMessage);\r\n  });\r\n\r\n  statusListener.subscribe(function(statusMessage) {\r\n      statusMessage.status_list.forEach(function(status) {\r\n          that.emit('status', status);\r\n      });\r\n  });\r\n\r\n  feedbackListener.subscribe(function(feedbackMessage) {\r\n      that.emit('status', feedbackMessage.status);\r\n      that.emit('feedback', feedbackMessage.feedback);\r\n  });\r\n\r\n  // subscribe to the result topic\r\n  resultListener.subscribe(function(resultMessage) {\r\n      that.emit('status', resultMessage.status);\r\n      that.emit('result', resultMessage.result);\r\n  });\r\n\r\n}\r\n\r\nActionListener.prototype.__proto__ = EventEmitter2.prototype;\r\n\r\nmodule.exports = ActionListener;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,eAAe,CAAC;AACpC,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACxC,IAAIE,aAAa,GAAGF,OAAO,CAAC,eAAe,CAAC,CAACE,aAAa;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,OAAO,EAAE;EAC/B,IAAIC,IAAI,GAAG,IAAI;EACfD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAI,CAACE,GAAG,GAAGF,OAAO,CAACE,GAAG;EACtB,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACG,UAAU;EACpC,IAAI,CAACC,UAAU,GAAGJ,OAAO,CAACI,UAAU;;EAGpC;EACA,IAAIC,YAAY,GAAG,IAAIV,KAAK,CAAC;IAC3BO,GAAG,EAAG,IAAI,CAACA,GAAG;IACdI,IAAI,EAAG,IAAI,CAACH,UAAU,GAAG,OAAO;IAChCI,WAAW,EAAG,IAAI,CAACH,UAAU,GAAG;EAClC,CAAC,CAAC;EAEF,IAAII,gBAAgB,GAAG,IAAIb,KAAK,CAAC;IAC/BO,GAAG,EAAG,IAAI,CAACA,GAAG;IACdI,IAAI,EAAG,IAAI,CAACH,UAAU,GAAG,WAAW;IACpCI,WAAW,EAAG,IAAI,CAACH,UAAU,GAAG;EAClC,CAAC,CAAC;EAEF,IAAIK,cAAc,GAAG,IAAId,KAAK,CAAC;IAC7BO,GAAG,EAAG,IAAI,CAACA,GAAG;IACdI,IAAI,EAAG,IAAI,CAACH,UAAU,GAAG,SAAS;IAClCI,WAAW,EAAG;EAChB,CAAC,CAAC;EAEF,IAAIG,cAAc,GAAG,IAAIf,KAAK,CAAC;IAC7BO,GAAG,EAAG,IAAI,CAACA,GAAG;IACdI,IAAI,EAAG,IAAI,CAACH,UAAU,GAAG,SAAS;IAClCI,WAAW,EAAG,IAAI,CAACH,UAAU,GAAG;EAClC,CAAC,CAAC;EAEFC,YAAY,CAACM,SAAS,CAAC,UAASC,WAAW,EAAE;IACzCX,IAAI,CAACY,IAAI,CAAC,MAAM,EAAED,WAAW,CAAC;EAClC,CAAC,CAAC;EAEFH,cAAc,CAACE,SAAS,CAAC,UAASG,aAAa,EAAE;IAC7CA,aAAa,CAACC,WAAW,CAACC,OAAO,CAAC,UAASC,MAAM,EAAE;MAC/ChB,IAAI,CAACY,IAAI,CAAC,QAAQ,EAAEI,MAAM,CAAC;IAC/B,CAAC,CAAC;EACN,CAAC,CAAC;EAEFT,gBAAgB,CAACG,SAAS,CAAC,UAASO,eAAe,EAAE;IACjDjB,IAAI,CAACY,IAAI,CAAC,QAAQ,EAAEK,eAAe,CAACD,MAAM,CAAC;IAC3ChB,IAAI,CAACY,IAAI,CAAC,UAAU,EAAEK,eAAe,CAACC,QAAQ,CAAC;EACnD,CAAC,CAAC;;EAEF;EACAT,cAAc,CAACC,SAAS,CAAC,UAASS,aAAa,EAAE;IAC7CnB,IAAI,CAACY,IAAI,CAAC,QAAQ,EAAEO,aAAa,CAACH,MAAM,CAAC;IACzChB,IAAI,CAACY,IAAI,CAAC,QAAQ,EAAEO,aAAa,CAACC,MAAM,CAAC;EAC7C,CAAC,CAAC;AAEJ;AAEAtB,cAAc,CAACuB,SAAS,CAACC,SAAS,GAAGzB,aAAa,CAACwB,SAAS;AAE5DE,MAAM,CAACC,OAAO,GAAG1B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}